{"version":3,"sources":["components/search/search.component.jsx","components/countryCard/countryCard.component.jsx","components/cardList/cardList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","handleSearch","className","onChange","placeholder","date","Date","CountryCard","country","activeCases","recoveredCases","todayCases","totalCases","critical","deaths","todayDeaths","perMillion","imageSrc","Card","border","style","width","margin","bg","Header","src","alt","Body","Text","color","Footer","getMonth","getDate","getFullYear","missingCountries","CardList","countryData","map","countries","index","key","active","cases","recovered","casesPerOneMillion","undefined","getCode","App","e","setState","searchItem","target","value","state","fetch","then","response","json","data","filterData","this","filter","console","log","toLowerCase","includes","length","type","height","timeout","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b67a795.chunk.js","sourcesContent":["import React from 'react';\nimport \"./search.style.css\";\n\nconst Search = ({handleSearch}) => {\n    return (  \n        <div className=\"search-container\">\n            <input onChange={handleSearch} placeholder=\"Search by country\"/>\n        </div>\n    );\n}\n\n \nexport default Search;","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nimport \"./countryCard.style.css\";\n\nconst date = new Date();\n\nconst CountryCard = ({country, \n                      activeCases, \n                      recoveredCases, \n                      todayCases, \n                      totalCases,\n                      critical,\n                      deaths,\n                      todayDeaths,\n                      perMillion,\n                      imageSrc}) => {\n    return ( \n        <div className=\"card-container\">\n        <Card border=\"none\" style={{width: \"18rem\", margin: \"1rem\"}} bg=\"dark\">\n        <Card.Header>{country}</Card.Header>\n        <img style={{width: \"100px\", margin: \"auto\"}} src={imageSrc} alt=\"Country Flag\"/>\n        <Card.Body>\n          <Card.Text>\n            Active Cases: {activeCases}\n          </Card.Text>\n          <Card.Text>\n            Recovered Cases: {recoveredCases}\n          </Card.Text>\n          <Card.Text>\n            New Cases: {todayCases}\n          </Card.Text>\n          <Card.Text>\n            Total Cases: {totalCases}\n          </Card.Text>\n          <Card.Text>\n           Critical condition: {critical}\n          </Card.Text>\n          <Card.Text>\n            Cases Per Million: {perMillion}\n          </Card.Text>\n          <Card.Text style={{color: \"red\"}}>\n           Today's Deaths: {todayDeaths}\n          </Card.Text>\n          <Card.Text style={{color: \"red\"}}>\n            Total Deaths: {deaths}\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer className=\"text-muted\">{`${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()} `}</Card.Footer>\n      </Card>\n        </div>\n     );\n}\n \nexport default CountryCard;","import React from 'react';\nimport CountryCard from \"../countryCard/countryCard.component\";\nimport {getCode} from \"country-list\";\nimport \"./cardList.style.css\";\n\nconst missingCountries = {\n    \"Iran\" : \"IR\",\n    \"S. Korea\" : \"KR\",\n    \"USA\" : \"US\",\n    \"UK\" : \"GB\",\n    \"Russia\" : \"RU\",\n    \"UAE\" : \"AE\",\n    \"Taiwan\" : \"TN\",\n    \"Vietnam\" : \"VN\",\n    \"Brunei\" : \"BN\",\n    \"Diamond Princess\" : \"US\",\n    \"Faeroe Islands\" : \"FO\",\n    \"Palestine\" : \"PS\",\n    \"Moldova\" : \"MD\",\n    \"Venezuela\" : \"VE\",\n    \"Bolivia\" : \"BO\",\n    \"Channel Islands\" : \"GB\",\n    \"DRC\" : \"CD\",\n    \"Ivory Coast\" : \"CI\",\n    \"St. Barth\" : \"BL\",\n    \"Saint Martin\" : \"MF\",\n    \"Tanzania\" : \"TZ\",\n    \"U.S. Virgin Islands\" : \"US\",\n    \"CAR\" : \"CF\",\n    \"Vatican City\" : \"VA\",\n    \"St. Vincent Grenadines\" : \"VC\",\n    \"Sint Maarten\" : \"SX\",\n    \"Syria\": \"SY\",\n    \"Turks and Caicos\" : \"TC\"\n  \n  }\n  \n  const getCountry = (country) =>{\n    return getCode(country) !== undefined ? getCode(country) : missingCountries[country];\n  }\n\nconst CardList = ({countryData}) => {\n    return ( \n        <div className=\"card-list-container\">\n        {\n            countryData.map((countries, index) => {\n                return(\n                    <CountryCard\n                    key={index}\n                    country={countries.country}\n                    activeCases={countries.active}\n                    todayCases={countries.todayCases}\n                    totalCases={countries.cases}\n                    deaths={countries.deaths}\n                    todayDeaths={countries.todayDeaths}\n                    recoveredCases={countries.recovered}\n                    critical={countries.critical}\n                    perMillion={countries.casesPerOneMillion}\n                    imageSrc={`https://www.countryflags.io/${getCountry(countries.country)}/flat/64.png`}\n                    />\n                );\n            })\n        }\n        </div>\n     );\n}\n \nexport default CardList;","import React from 'react';\nimport Search from \"./components/search/search.component\";\nimport CardList from \"./components/cardList/cardList.component\";\nimport Loader from 'react-loader-spinner'\n\n\nimport './App.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      countryData: [],\n      searchItem: \"\"\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://coronavirus-19-api.herokuapp.com/countries\")\n    .then(response => response.json())\n    .then(data => {\n      this.setState({countryData: data});\n    });\n  }\n\n  handleSearch = (e) =>{\n    this.setState({searchItem: e.target.value});\n  }\n\n  render(){\n    const filterData = this.state.countryData.filter(countries => {\n      console.log(countries.country.toLowerCase().includes(this.state.searchItem.toLowerCase()));\n      return countries.country.toLowerCase().includes(this.state.searchItem.toLowerCase())});\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        {\n          this.state.countryData.length === 0 ? <Loader type=\"CradleLoader\" color=\"#00BFFF\" height={100} width={100} timeout={3000}/> : (\n            <React.Fragment>\n              <Search handleSearch={this.handleSearch}/>\n              <CardList countryData={filterData}/>\n          </React.Fragment>   \n          )\n        }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}